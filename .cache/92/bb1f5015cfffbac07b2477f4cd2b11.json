{"id":"node_modules/duration-fns/dist/lib/parseISODuration.js","dependencies":[{"name":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/lib/parseISODuration.js.map","includedInParent":true,"mtime":1643565527460},{"name":"/home/htomaka/Projects/workout/package.json","includedInParent":true,"mtime":1643565530508},{"name":"/home/htomaka/Projects/workout/node_modules/duration-fns/package.json","includedInParent":true,"mtime":1643565527368},{"name":"./units","loc":{"line":15,"column":22},"parent":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/lib/parseISODuration.js","resolved":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/lib/units.js"},{"name":"../negate","loc":{"line":16,"column":23},"parent":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/lib/parseISODuration.js","resolved":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/negate.js"},{"name":"./numberUtils","loc":{"line":17,"column":28},"parent":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/lib/parseISODuration.js","resolved":"/home/htomaka/Projects/workout/node_modules/duration-fns/dist/lib/numberUtils.js"}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseISODuration = void 0;\nvar units_1 = require(\"./units\");\nvar negate_1 = require(\"../negate\");\nvar numberUtils_1 = require(\"./numberUtils\");\nvar millisecondsPattern = '(?:[,.](\\\\d{1,3})\\\\d*)?';\nvar unitPattern = function (unit) { return \"(?:(-?\\\\d+)\" + unit + \")?\"; };\nvar createDurationParser = function (regex, unitsOrder) {\n    return function (duration) {\n        var match = duration.match(regex);\n        if (!match) {\n            return null;\n        }\n        var isDurationNegative = match[1] === '-';\n        var unitStrings = match.slice(2);\n        // Must have at least one unit match\n        if (unitStrings.every(function (value) { return value === undefined; })) {\n            return null;\n        }\n        var unitNumbers = unitStrings.map(function (value, i) {\n            if (value === void 0) { value = '0'; }\n            var isMilliseconds = i === unitStrings.length - 1;\n            return isMilliseconds\n                // Pad the end of the millisecond values. For example, when taking the \"6\"\n                // portion from the string \"PT3.6S\", we need to interpret that as \"600\n                // milliseconds\".\n                ? Number(value.padEnd(3, '0'))\n                : Number(value);\n        });\n        var output = __assign({}, units_1.ZERO);\n        unitsOrder.forEach(function (unit, i) {\n            output[unit] = unitNumbers[i];\n        });\n        // Milliseconds don't have their own minus symbol. It depends on the symbol\n        // before the seconds value.\n        if (numberUtils_1.isNegativelySigned(output.seconds)) {\n            output.milliseconds *= -1;\n        }\n        return isDurationNegative\n            ? negate_1.negate(output)\n            : output;\n    };\n};\n/**\n * Parse a duration string expressed in one of the following formats:\n *\n * - PYYYYMMDDThhmmss\n * - PYYYY-MM-DDThh:mm:ss\n */\nvar parseFullFormatISODuration = createDurationParser(new RegExp([\n    '^(-)?P',\n    '(\\\\d{4})', '-?',\n    '(\\\\d{2})', '-?',\n    '(\\\\d{2})', 'T',\n    '(\\\\d{2})', ':?',\n    '(\\\\d{2})', ':?',\n    '(\\\\d{2})', millisecondsPattern,\n    '$',\n].join('')), [\n    'years',\n    'months',\n    'days',\n    'hours',\n    'minutes',\n    'seconds',\n    'milliseconds',\n]);\n/**\n * Parse a duration string expressed via number and unit character pairs. For\n * example:\n *\n * - P6D\n * - P1Y2D\n * - P2DT6H2,5S\n */\nvar parseUnitsISODuration = createDurationParser(new RegExp([\n    '^(-)?P',\n    unitPattern('Y'),\n    unitPattern('M'),\n    unitPattern('W'),\n    unitPattern('D'),\n    '(?:T',\n    unitPattern('H'),\n    unitPattern('M'),\n    unitPattern(millisecondsPattern + \"S\"),\n    ')?$',\n].join('')), [\n    'years',\n    'months',\n    'weeks',\n    'days',\n    'hours',\n    'minutes',\n    'seconds',\n    'milliseconds',\n]);\n/**\n * Parse an ISO 8601 duration string into an object.\n *\n * The units of duration are not normalized. For example, the string `\"P365D\"`\n * doesn't get converted to `{ years: 1 }` since not all years are the same\n * length.\n *\n * @example parseISODuration('P365D') // { days: 365 }\n */\nvar parseISODuration = function (duration) {\n    var output = (parseUnitsISODuration(duration) ||\n        parseFullFormatISODuration(duration));\n    if (output === null) {\n        throw new SyntaxError(\"Failed to parse duration. \\\"\" + duration + \"\\\" is not a valid ISO duration string.\");\n    }\n    return output;\n};\nexports.parseISODuration = parseISODuration;\n"},"sourceMaps":{"js":{"version":3,"file":"parseISODuration.js","sourceRoot":"","sources":["../../src/lib/parseISODuration.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"0e61dd68ed3b526c1d210e5d94c2a723","cacheData":{"env":{}}}